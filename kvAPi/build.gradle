
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE")
    }
}

repositories {
    jcenter()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'maven'

group 'org.web3j'
version '3.3.1'


sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {  //incubating版本，以后版本可能会改API
        attributes("Main-Class": "org.web3j.Application",
                "Implementation-Title": "Gradle"
//                "Class-Path": configurations.compile.collect { it.absolutePath }.join(" ")
        )
    }

    //会在生成的jar包中，把所有的依赖再次打包，而这个包是多余的，因为上面那条配置就已经打包好了所有的依赖包
//    into('lib') {
//        from configurations.runtime
//    }
}


sourceSets {
    main {
        //output.resourcesDir default is  'build/resources/main'
        //output.classesDir default is  'build/classes/main'
        //合并 classes 和 resources的输出路径，方便 直接执行 main方法时，在当前classpath下能找到 resources里的配置文件
        output.resourcesDir = 'build/classes/main'
        output.classesDir   = 'build/classes/main'
    }
}

configurations {
    deployerJars
}

//https://stackoverflow.com/questions/36923288/how-to-run-bootrun-with-spring-profile-via-gradle-task
//def profiles = 'dev'
//bootRun {
//    args = ["--spring.profiles.active=" + profiles]
//}

task pro << {
    bootRun.systemProperty 'spring.profiles.active', 'pro'
}

task dev << {
    bootRun.systemProperty 'spring.profiles.active', 'dev'
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version:'1.5.4.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version:'1.5.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-context-support', version:'4.3.9.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version:'1.5.4.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version:'1.5.4.RELEASE'
//    compile group: 'org.hibernate', name: 'hibernate-core', version: '4.2.5.Final'
//    compile group: 'org.springframework', name: 'spring-hibernate', version: '1.2.9'
//    compile group: 'org.springframework', name: 'spring-jdbc', version: '4.3.8.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework/spring-orm
//    compile group: 'org.springframework', name: 'spring-orm', version: '4.3.9.RELEASE'

// https://mvnrepository.com/artifact/mysql/mysql-connector-java
//    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

    compile(group: 'org.quartz-scheduler', name: 'quartz', version:'2.3.0') {
        exclude(module: 'c3p0')
    }
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.3.1'
    compile group: 'commons-io', name: 'commons-io', version:'2.5'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
    compile group: 'commons-configuration', name: 'commons-configuration', version:'1.10'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.1.25'
    compile(group: 'com.qcloud', name: 'cos_api', version:'4.4') {
        exclude module: 'slf4j-log4j12'
        exclude module: 'log4j'
    }
    compile('com.h2database:h2')
    compile project(':core')
    compile project(':geth')

    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}